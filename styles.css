/* Passes a mathematical expression into a calc() function. This expression evaluates
to a value between @min and @max. The value is generated at runtime and it depends
on the width of the viewport. For example, consider a screen width between 320 
and 1200 pixels and a minimum and maximum desired values of 1 and 100 pixels. At 
320 pixels wide the value resulting from the expression is 1 pixel. At 1200 pixels 
wide the value is 100px. Any intermediate screen width results in a value between 
1px and 100px. */
* {
  box-sizing: border-box;
}
*:focus {
  outline: 2px dotted;
}
body {
  /* 320px is assumed to be lowest value for the width of the viewport whereas 
    1200px is the largest. */
  padding: 0 calc(12px  +  148  * ((100vw -  320px ) / 880 ));
  background: aliceblue;
  font-family: 'Julius Sans One', sans-serif;
}
h2 {
  padding: 16px;
  background: black;
  color: gold;
  position: relative;
  margin-bottom: 48px;
}
h2::after {
  content: "";
  width: 0;
  height: 0;
  border-left: 32px solid transparent;
  border-right: 32px solid transparent;
  border-top: 32px solid black;
  position: absolute;
  left: 50%;
  top: 100%;
  transform: translateX(-50%);
}
h3 {
  margin: 0;
  pointer-events: none;
}
label {
  display: block;
  margin-top: 24px;
}
.hidden {
  display: none !important;
}
#error {
  padding: 1em;
  background: darkred;
  color: white;
}
/* BUTTON */
button,
.button {
  cursor: pointer;
}
.button {
  display: inline-block;
  padding: 15px;
  border: 1px solid transparent;
  border-radius: 25px 0 25px 0;
  text-align: center;
  transition: transform 0.05s;
}
.button:only-of-type {
  margin-right: 0;
}
.button:active {
  transform: scale(0.975);
}
.primary,
.secondary {
  min-width: 180px;
  margin-right: 16px;
}
.primary {
  background: #fc0;
}
.primary:hover {
  background: #ffdc4f;
  border: 1px solid #fc0;
}
.secondary {
  background: transparent;
  border: 1px solid #465458;
}
/* CHEVRON */
.chevron {
  margin: 0 16px 0 auto;
  font-size: 32px;
}
.tab[aria-expanded=true] > .chevron {
  transform: rotate(180deg);
}
/* DELETE BUTTON */
.delete-button {
  width: 48px;
  height: 48px;
  background: white;
  border: 2px solid black;
  border-radius: 50%;
  margin-left: auto;
  position: absolute;
  right: 0;
  top: 0;
  font-size: 32px;
  transform: translate(25%, -25%);
  transition: transform .05s;
}
.delete-button:hover {
  transform: scale(0.975) translate(25%, -25%);
}
/* DIALOG */
#dialog {
  animation: dialog-animation 0.1s ease-in-out;
}
@keyframes dialog-animation {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
/* MENU */
#menu {
  width: 100%;
  height: 80px;
  background: lightskyblue;
  position: fixed;
  left: 0;
  top: 0;
  animation: menu-animation 0.1s ease-in-out;
}
@keyframes menu-animation {
  0% {
    transform: translateY(-100%);
  }
  100% {
    transform: translateY(0);
  }
}
/* TAB */
.tab {
  display: flex;
  padding: 24px;
  background: gold;
  border-radius: 0 50px 0 50px;
  position: relative;
  align-items: center;
  cursor: pointer;
  transition: transform 0.1s, border-radius 0.1s;
}
.tab[aria-expanded=false] {
  margin-bottom: 32px;
}
.tab[aria-expanded=true] {
  border-bottom: none;
  border-radius: 0;
  margin-bottom: 0;
}
.tab:active {
  transform: scale(0.975);
}
.tab:hover {
  background: yellow;
  cursor: pointer;
}
@keyframes tab-animation {
  100% {
    transform: border-radius(0);
  }
}
/* TAB LIST */
.tab-list {
  margin: 24px 0;
}
/* TAB PANEL */
.tab-panel {
  padding: 24px;
  border: 2px solid gold;
  border-top: none;
  margin-bottom: 32px;
  overflow: hidden;
}
.tab[aria-expanded=false] + .tab-panel {
  display: none;
}
.tab[aria-expanded=true] + .tab-panel {
  animation: animation 0.5s ease-in-out;
}
@keyframes animation {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
.traveller {
  display: inline-block;
  width: 100px;
  margin: 0 16px 32px 16px;
  position: relative;
}
.traveller-thumbnail {
  width: 100%;
  height: 100px;
  border: 4px solid gold;
  border-radius: 0 50px 0 50px;
}
.travellers {
  text-align: center;
}

/* Passes a mathematical expression into a calc() function. This expression evaluates
to a value between @min and @max. The value is generated at runtime and it depends
on the width of the viewport. For example, consider a screen width between 320 
and 1200 pixels and a minimum and maximum desired values of 1 and 100 pixels. At 
320 pixels wide the value resulting from the expression is 1 pixel. At 1200 pixels 
wide the value is 100px. Any intermediate screen width results in a value between 
1px and 100px. */
* {
  box-sizing: border-box;
}
*:focus {
  outline: 2px dotted;
}
body {
  /* 320px is assumed to be lowest value for the width of the viewport whereas 
    1200px is the largest. */
  padding: 0 calc(12px  +  148  * ((100vw -  320px ) / 880 ));
  background: aliceblue;
  font-family: 'Julius Sans One', sans-serif;
}
h2 {
  padding: 16px;
  background: black;
  color: gold;
  position: relative;
  margin-bottom: 48px;
}
h2::after {
  content: "";
  width: 0;
  height: 0;
  border-left: 32px solid transparent;
  border-right: 32px solid transparent;
  border-top: 32px solid black;
  position: absolute;
  left: 50%;
  top: 100%;
  transform: translateX(-50%);
}
h3 {
  margin: 0;
  pointer-events: none;
}
label {
  display: block;
  margin-top: 24px;
}
.hidden {
  display: none !important;
}
#error {
  padding: 1em;
  background: darkred;
  color: white;
}
/* BUTTON */
button,
.button {
  cursor: pointer;
}
.button {
  display: inline-block;
  padding: 15px;
  border: 1px solid transparent;
  border-radius: 25px 0 25px 0;
  text-align: center;
  transition: transform 0.05s;
}
.button:only-of-type {
  margin-right: 0;
}
.button:active {
  transform: scale(0.975);
}
.primary,
.secondary {
  min-width: 180px;
  margin-right: 16px;
}
.primary {
  background: #fc0;
}
.primary:hover {
  background: #ffdc4f;
  border: 1px solid #fc0;
}
.secondary {
  background: transparent;
  border: 1px solid #465458;
}
/* CHEVRON */
.chevron {
  margin: 0 16px 0 auto;
  font-size: 32px;
}
.tab[aria-expanded=true] > .chevron {
  transform: rotate(180deg);
}
/* DELETE BUTTON */
.delete-button {
  width: 48px;
  height: 48px;
  background: white;
  border: 2px solid black;
  border-radius: 50%;
  margin-left: auto;
  position: absolute;
  right: 0;
  top: 0;
  font-size: 32px;
  transform: translate(25%, -25%);
  transition: transform .05s;
}
.delete-button:hover {
  transform: scale(0.975) translate(25%, -25%);
}
/* DIALOG */
#dialog {
  animation: dialog-animation 0.1s ease-in-out;
}
@keyframes dialog-animation {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
/* MENU */
#menu {
  width: 100%;
  height: 80px;
  background: lightskyblue;
  position: fixed;
  left: 0;
  top: 0;
  animation: menu-animation 0.1s ease-in-out;
}
@keyframes menu-animation {
  0% {
    transform: translateY(-100%);
  }
  100% {
    transform: translateY(0);
  }
}
/* TAB */
.tab {
  display: flex;
  padding: 24px;
  background: gold;
  border-radius: 0 50px 0 50px;
  position: relative;
  align-items: center;
  cursor: pointer;
  transition: transform 0.1s, border-radius 0.1s;
}
.tab[aria-expanded=false] {
  margin-bottom: 32px;
}
.tab[aria-expanded=true] {
  border-bottom: none;
  border-radius: 0;
  margin-bottom: 0;
}
.tab:active {
  transform: scale(0.975);
}
.tab:hover {
  background: yellow;
  cursor: pointer;
}
@keyframes tab-animation {
  100% {
    transform: border-radius(0);
  }
}
/* TAB LIST */
.tab-list {
  margin: 24px 0;
}
/* TAB PANEL */
.tab-panel {
  padding: 24px;
  border: 2px solid gold;
  border-top: none;
  margin-bottom: 32px;
  overflow: hidden;
}
.tab[aria-expanded=false] + .tab-panel {
  display: none;
}
.tab[aria-expanded=true] + .tab-panel {
  animation: animation 0.5s ease-in-out;
}
@keyframes animation {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
.traveller {
  display: inline-block;
  width: 100px;
  margin: 0 16px 32px 16px;
  position: relative;
}
.traveller-thumbnail {
  width: 100%;
  height: 100px;
  border: 4px solid gold;
  border-radius: 0 50px 0 50px;
}
.travellers {
  text-align: center;
}
