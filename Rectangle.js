/* A node in the rendering tree visually generates a box. Through CSS a content 
author can manipulate the presentation of these boxes. An application may contain 
a large number of these boxes. At some point, an application may be interested 
in the sizes and positions of these boxes, their distances from other boxes, etc. 
However, there is not a native API to perform such geometric calculations. The 
following interface attempts to address this issue. */

var Rectangle = (function () {
    'use strict';

    // returns a rectangle
    function Rectangle(x, y, width, height) {
        this.left = x;
        this.right = x + width;
        this.top = y;
        this.bottom = y + height;
        this.width = width;
        this.height = height;
    }


    // returns a rectangle based on the box generated by 'node'. This parameter
    // must be an instance of Element. 
    Rectangle.from = function from(node) {
        var bcr = node.getBoundingClientRect();
        return new Rectangle(bcr.left, bcr.top, bcr.width, bcr.height);
    };

    var prototype = Rectangle.prototype;


    // returns the location (as a number) of this instance relative to another rectangle.
    // The eight existing locations map to the cardinal and intercardinal points.
    prototype.locationFrom = function locationFrom(rectangle) {
        var isAbove = rectangle.top > this.bottom ? true : false,
            isBelow = rectangle.bottom < this.top ? true : false,
            isToTheLeft = rectangle.left >= this.right ? true : false,
            isToTheRight = rectangle.right <= this.left ? true : false;

        if (isAbove) {
            // northeast
            if (isToTheRight) return 1;
            // northwest
            if (isToTheLeft) return 3;
            // north
            return 2;
        }

        if (isBelow) {
            // southeast
            if (isToTheRight) return 7;
            // southwest
            if (isToTheLeft) return 9;
            // south
            return 8;
        }

        // east
        if (isToTheRight) return 6;
        // west
        if (isToTheLeft) return 4;
    };


    /* returns the distance along the x and y axes from the top-left corner of this rectangle relative
    to the top-left corner of another rectangle. */
    prototype.distanceFrom = function distanceFrom(rectangle) {
        return {
            x: Math.abs(rectangle.left - this.left),
            y: Math.abs(rectangle.top - this.top)
        }
    }

    return Rectangle;
})();